{"version":3,"sources":["Mapper.js","App.js","serviceWorker.js","index.js"],"names":["Mapper","props","watch_id","geoOK","navigator","geolocation","watchPosition","geoCallback","bind","e","alert","message","socket","io","mapperID","cookie","document","on","console","log","indexOf","emit","sub","substring","parseInt","str","getEvent","state","lat","lon","text","watch","data","position","gl_text","coords","latitude","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","updateState","this","setState","connected","getCurrentPosition","onClick","checkLoc","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sTA2HeA,E,kDAvHX,WAAaC,GAAO,IAAD,sBACf,cAAMA,GACN,IACIC,EADAC,EAAQ,QAGRC,UAAUC,cACVF,EAAQ,OAERD,EAAWE,UAAUC,YAAYC,cAAc,EAAKC,YAAYC,KAAjB,iBAA6B,SAASC,GAAKC,MAAMD,EAAEE,WAAa,CAAC,oBAAsB,EAAM,QAAW,IAAO,WAAc,OAEhL,IAAMC,EAASC,MACf,EAAKC,UAAY,EACjB,IAAMC,EAASC,SAASD,OAZT,OAafH,EAAOK,GAAG,WAAW,WAGjB,GAFAC,QAAQC,IAAI,yBAEwB,GAA/BJ,EAAOK,QAAQ,YAChBR,EAAOS,KAAK,WAAW,QACrB,CACF,IAAMC,EAAKP,EAAOQ,UAAUR,EAAOK,QAAQ,YAAY,GACvD,EAAKN,SAAWU,SAASF,GACzBJ,QAAQC,IAAI,2BAA2BG,OAG/CV,EAAOK,GAAG,YAAY,SAACQ,GACnBT,SAASD,OAAS,YAAYU,EAC9B,EAAKX,SAAWU,SAASC,GACzBP,QAAQC,IAAI,gCAGhBP,EAAOK,GAAG,QAAS,EAAKS,SAASlB,KAAd,iBACnBI,EAAOK,GAAG,cAAc,WAAKC,QAAQC,IAAI,8BAEzC,EAAKQ,MAAQ,CACTxB,MAAQA,EACRyB,IAAK,EACLC,IAAK,EACLC,KAAK,GACLlB,OAAQA,EACRmB,MAAO7B,GAvCI,E,qDA4CV8B,GAELd,QAAQC,IAAI,YAAYa,K,kCAGhBC,GACJ,IAAIC,EAAU,qBAAQD,EAASE,OAAOC,SAAW,OAC/CF,GAAW,qBAAQD,EAASE,OAAOE,UAAY,OAC/CH,GAAW,qBAAQD,EAASE,OAAOG,SAAW,OAC9CJ,GAAW,yDAAcD,EAASE,OAAOI,SAAW,OACpDL,GAAW,uCAAWD,EAASE,OAAOK,iBAAmB,OACzDN,GAAW,qBAAQD,EAASE,OAAOM,QAAU,OAC7CP,GACC,qBAAQD,EAASE,OAAOO,MAAQ,OAEhCxB,QAAQC,IAAIe,GAIf,IAAMS,EAAc,CAChBf,IAAKK,EAASE,OAAOC,SACrBP,IAAKI,EAASE,OAAOE,WAEzBO,KAAKC,SAASF,GACdzB,QAAQC,IAAI,SAAUwB,GAQlBC,KAAKjB,MAAMf,OAAOkC,WAClBF,KAAKjB,MAAMf,OAAOS,KAAK,SAAYuB,KAAK9B,SAAS,IAAI6B,EAAYf,IAAI,IAAIe,EAAYd,IAAI,IAAII,EAASE,OAAOM,QAAQ,IAAIR,EAASE,OAAOO,MAAM,IAAIT,EAASE,OAAOG,Y,iCAK3KpB,QAAQC,IAAI,UACZf,UAAUC,YAAY0C,mBAClBH,KAAKrC,YAAYC,KAAKoC,OAAQ,SAASnC,GAAKC,MAAMD,EAAEE,c,+BAMxD,OACI,6BACI,gDACA,4BACI,qCACUiC,KAAKjB,MAAMxB,OAErB,mCACSyC,KAAKjB,MAAMC,KAEpB,mCACSgB,KAAKjB,MAAME,KAEpB,oCACUe,KAAKjB,MAAMG,OAGzB,4BAAQkB,QAASJ,KAAKK,SAASzC,KAAKoC,OAApC,sB,GA5GKM,IAAMC,WCaZC,MAZf,WAIE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDyHpB,kBAAmB1D,WACrBA,UAAU2D,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAM1D,c","file":"static/js/main.a201b8cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nclass Mapper extends React.Component {\r\n    constructor (props){\r\n        super(props);\r\n        let geoOK = \"false\"\r\n        let watch_id\r\n\r\n        if (navigator.geolocation) {\r\n            geoOK = \"true\"           \r\n            //Geolocation APIを利用できる環境向けの処理\r\n            watch_id = navigator.geolocation.watchPosition(this.geoCallback.bind(this), function(e) { alert(e.message); }, {\"enableHighAccuracy\": true, \"timeout\": 20000, \"maximumAge\": 2000});\r\n        }\r\n        const socket = io();\r\n        this.mapperID = -1;\r\n        const cookie = document.cookie\r\n        socket.on('connect', ()=>{\r\n            console.log(\"Socket.IO connected!\")\r\n            // もし Cookieが無ければ　サーバに ID 要求\r\n            if ( cookie.indexOf(\"mapperID\") == -1) {\r\n                socket.emit(\"mapperID\",\"\")\r\n            }else {// need to set mapper ID\r\n                const sub =cookie.substring(cookie.indexOf(\"mapperID\")+9)\r\n                this.mapperID = parseInt(sub)\r\n                console.log(\"We use current mapperID:\"+sub)    \r\n            }\r\n        });\r\n        socket.on('mapperID', (str)=> {\r\n            document.cookie = \"mapperID=\"+str\r\n            this.mapperID = parseInt(str)\r\n            console.log(\"Set Mapper ID and cookie!\")\r\n        });\r\n\r\n        socket.on('event', this.getEvent.bind(this));\r\n        socket.on('disconnect', ()=>{console.log(\"Socket.IO disconnected!\")});\r\n\r\n        this.state = {\r\n            geoOK : geoOK,\r\n            lat: 0,\r\n            lon: 0,\r\n            text:'',\r\n            socket: socket,\r\n            watch: watch_id,\r\n        }\r\n    \r\n    }\r\n\r\n    getEvent(data)\r\n    {\r\n        console.log(\"Get Event\",data)        \r\n    }\r\n\r\n    geoCallback(position){\r\n            var gl_text = \"緯度：\" + position.coords.latitude + \"<br>\";\r\n              gl_text += \"経度：\" + position.coords.longitude + \"<br>\";\r\n              gl_text += \"高度：\" + position.coords.altitude + \"<br>\";\r\n              gl_text += \"緯度・経度の誤差：\" + position.coords.accuracy + \"<br>\";\r\n              gl_text += \"高度の誤差：\" + position.coords.altitudeAccuracy + \"<br>\";\r\n              gl_text += \"方角：\" + position.coords.heading + \"<br>\";\r\n              gl_text +=\r\n               \"速度：\" + position.coords.speed + \"<br>\";\r\n\r\n               console.log(gl_text);\r\n\r\n\r\n//            this.setState({text:gl_text})\r\n            const updateState = {\r\n                lat: position.coords.latitude,\r\n                lon: position.coords.longitude,\r\n            }\r\n            this.setState(updateState)\r\n            console.log(\"Update\", updateState)\r\n\r\n            // ここでサーバに送りたい\r\n            //  1． REST (HTTP GET or POST で送る) \r\n            //  2.　socket.io \r\n\r\n            //         あえて2 を使う　-> リアルタイム性が良いはず\r\n\r\n            if (this.state.socket.connected){\r\n                this.state.socket.emit(\"latlon\",\"\"+this.mapperID+\",\"+updateState.lat+\",\"+updateState.lon+\",\"+position.coords.heading+\",\"+position.coords.speed+\",\"+position.coords.altitude)\r\n            }\r\n    }\r\n   \r\n    checkLoc(){\r\n        console.log(\"Check!\")\r\n        navigator.geolocation.getCurrentPosition(\r\n            this.geoCallback.bind(this),  function(e) { alert(e.message); }\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <h1> lat lon display</h1>\r\n                <ul>\r\n                    <div>\r\n                        geo: {this.state.geoOK}\r\n                    </div>\r\n                    <li>\r\n                        lat:{this.state.lat}\r\n                    </li>\r\n                    <li>\r\n                        lon:{this.state.lon}\r\n                    </li>\r\n                    <li>\r\n                        text:{this.state.text}\r\n                    </li>\r\n                </ul>\r\n                <button onClick={this.checkLoc.bind(this)}>\r\n                    checkLocation\r\n                </button>\r\n\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Mapper;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Mapper from './Mapper';\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n      <Mapper />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}